meta {
  name: Password Reset Confirm
  type: http
  seq: 4
}

post {
  url: {{baseUrl}}{{apiPath}}/auth/password_reset_confirm/
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "reset_token": "{{resetToken}}",
    "new_password": "NewSecurePassword123!",
    "password_confirm": "NewSecurePassword123!"
  }
}

tests {
  test("should return 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should return success message", function() {
    const data = res.getBody();
    expect(data).to.have.property('message');
  });
}

docs {
  # Confirm Password Reset (Step 3 of 3)
  
  Set new password using the reset token from OTP verification.
  
  ## Authentication
  None required - uses reset token from step 2.
  
  ## Request Body
  - `reset_token`: Token from password reset verify step (required) - automatically filled from previous step
  - `new_password`: New secure password (required)
  - `password_confirm`: Confirm new password (required)
  
  ## Response
  - `message`: Confirmation that password was reset successfully
  
  ## Notes
  - Reset token expires after 10 minutes
  - Password must meet Django's security requirements
  - Both password fields must match exactly
  - User will need to login with new password after reset
  - This is the final step of the secure password reset flow
  
  ## Workflow
  1. Request OTP via email (Password Reset Request)
  2. Verify OTP and get reset token (Password Reset Verify)
  3. Set new password with reset token (this endpoint)
}
