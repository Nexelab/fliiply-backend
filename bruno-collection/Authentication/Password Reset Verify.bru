meta {
  name: Password Reset Verify
  type: http
  seq: 2.5
}

post {
  url: {{baseUrl}}{{apiPath}}/auth/password_reset_verify/
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "john.doe@example.com",
    "otp": "123456"
  }
}

tests {
  test("should return 200", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("should return reset token", function() {
    const data = res.getBody();
    expect(data).to.have.property('message');
    expect(data).to.have.property('reset_token');
  });
  
  // Store reset token for the next step
  test("store reset token", function() {
    if (res.getStatus() === 200) {
      const data = res.getBody();
      if (data.reset_token) {
        bru.setVar("resetToken", data.reset_token);
      }
    }
  });
}

docs {
  # Verify Password Reset OTP (Step 1)
  
  Verify the OTP code and receive a reset token for password change.
  
  ## Authentication
  None required - public endpoint.
  
  ## Request Body
  - `email`: User's email address (required)
  - `otp`: 6-digit reset code from email (required)
  
  ## Response
  - `message`: OTP verification confirmation
  - `reset_token`: Temporary token for password reset (valid 10 minutes)
  
  ## Notes
  - OTP expires after 10 minutes
  - Reset token expires after 10 minutes
  - Use reset token in step 2 to set new password
  - This is step 1 of the secure two-step password reset flow
  
  ## Security
  - OTP and password are never sent together
  - Reset token provides additional security layer
  - Token-based approach prevents OTP interception attacks
}